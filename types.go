// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/raksit31667/fern-go-sdk/core"
	time "time"
)

type Address struct {
	Street *string `json:"street,omitempty"`
	City   *string `json:"city,omitempty"`
	State  *string `json:"state,omitempty"`
	Zip    *string `json:"zip,omitempty"`

	_rawJSON json.RawMessage
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiResponse struct {
	Code    *int    `json:"code,omitempty"`
	Type    *string `json:"type,omitempty"`
	Message *string `json:"message,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApiResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Category struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Category) UnmarshalJSON(data []byte) error {
	type unmarshaler Category
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Category(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Category) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Customer struct {
	Id       *int       `json:"id,omitempty"`
	Username *string    `json:"username,omitempty"`
	Address  []*Address `json:"address,omitempty"`

	_rawJSON json.RawMessage
}

func (c *Customer) UnmarshalJSON(data []byte) error {
	type unmarshaler Customer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Customer(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Customer) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type OauthScope string

const (
	// modify pets in your account
	OauthScopeWritePets OauthScope = "write:pets"
	// read your pets
	OauthScopeReadPets OauthScope = "read:pets"
)

func NewOauthScopeFromString(s string) (OauthScope, error) {
	switch s {
	case "write:pets":
		return OauthScopeWritePets, nil
	case "read:pets":
		return OauthScopeReadPets, nil
	}
	var t OauthScope
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OauthScope) Ptr() *OauthScope {
	return &o
}

type Order struct {
	Id       *int       `json:"id,omitempty"`
	PetId    *int       `json:"petId,omitempty"`
	Quantity *int       `json:"quantity,omitempty"`
	ShipDate *time.Time `json:"shipDate,omitempty"`
	// Order Status
	Status   *OrderStatus `json:"status,omitempty"`
	Complete *bool        `json:"complete,omitempty"`

	_rawJSON json.RawMessage
}

func (o *Order) UnmarshalJSON(data []byte) error {
	type unmarshaler Order
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Order(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Order) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Order Status
type OrderStatus string

const (
	OrderStatusPlaced    OrderStatus = "placed"
	OrderStatusApproved  OrderStatus = "approved"
	OrderStatusDelivered OrderStatus = "delivered"
)

func NewOrderStatusFromString(s string) (OrderStatus, error) {
	switch s {
	case "placed":
		return OrderStatusPlaced, nil
	case "approved":
		return OrderStatusApproved, nil
	case "delivered":
		return OrderStatusDelivered, nil
	}
	var t OrderStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OrderStatus) Ptr() *OrderStatus {
	return &o
}

type Pet struct {
	Id        *int      `json:"id,omitempty"`
	Name      string    `json:"name"`
	Category  *Category `json:"category,omitempty"`
	PhotoUrls []string  `json:"photoUrls,omitempty"`
	Tags      []*Tag    `json:"tags,omitempty"`
	// pet status in the store
	Status *PetStatus `json:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Pet) UnmarshalJSON(data []byte) error {
	type unmarshaler Pet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Pet(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Pet) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// pet status in the store
type PetStatus string

const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

func NewPetStatusFromString(s string) (PetStatus, error) {
	switch s {
	case "available":
		return PetStatusAvailable, nil
	case "pending":
		return PetStatusPending, nil
	case "sold":
		return PetStatusSold, nil
	}
	var t PetStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PetStatus) Ptr() *PetStatus {
	return &p
}

type Tag struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	_rawJSON json.RawMessage
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	type unmarshaler Tag
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Tag(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Tag) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type User struct {
	Id        *int    `json:"id,omitempty"`
	Username  *string `json:"username,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	// User Status
	UserStatus *int `json:"userStatus,omitempty"`

	_rawJSON json.RawMessage
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
